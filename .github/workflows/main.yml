name: CICD

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3


      # Paso de integración con SonarCloud (Analizar código)
      - name: Set up JDK 17 for SonarCloud
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      # Añadir el binario de Java al PATH
      - name: Add Java to PATH
        run: |
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV
          echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV
      # Instalar sonar-scanner
      - name: Install SonarScanner
        run: |
          # Descargar e instalar sonar-scanner
          curl -sSLo sonar-scanner.zip https://github.com/SonarSource/sonar-scanner-cli/releases/download/4.6.2.2472/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner.zip -d /opt
          export PATH=/opt/sonar-scanner-4.6.2.2472-linux/bin:$PATH
          echo "SonarScanner instalado"
      # Paso de integración con SonarCloud (Analizar código)
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v1.5
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          JAVA_HOME: ${{ env.JAVA_HOME }}  # Usar JAVA_HOME correctamente
        with:
          args: >
            -Dsonar.organization=David Caruzo Cieza
            -Dsonar.projectKey=david1712uni
            
        # Esperar a que SonarCloud evalúe el Quality Gate
      - name: Wait for SonarCloud Quality Gate
        uses: sonarsource/sonarcloud-github-action@v1.5
        with:
          check-quality-gate: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # Esto asegurará que el flujo de trabajo falle si el Quality Gate no pasa

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: appgithubactions_fargate
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT    

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: appgithubaction_fargate_task.json 
          container-name: githubactionsapp
          image: ${{ steps.build-image.outputs.image }}    
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: githubactionsapp_service
          cluster: DevCluster
          wait-for-service-stability: true
