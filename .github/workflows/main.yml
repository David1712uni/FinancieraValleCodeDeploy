name: CICD

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4


      - name: Set up JDK 17 for SonarQube
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Paso de integración con SonarCloud (Analizar código)
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

        # Esperar el Quality Gate de SonarCloud usando la API
      - name: Esperar SonarCloud Quality Gate
        run: |
          # Esperar a que SonarCloud evalúe el Quality Gate
          echo "Esperando el resultado del Quality Gate..."
          SONAR_PROJECT_KEY="David1712uni_FinancieraValle"
          
          # Tiempo de espera (hasta que el análisis esté listo)
          MAX_WAIT_TIME=300
          WAIT_INTERVAL=15
          TIME_WAITED=0
          
          # Comprobar cada 15 segundos hasta el máximo de 5 minutos (300 segundos)
          while [ "$TIME_WAITED" -lt "$MAX_WAIT_TIME" ]; do
            ANALYSIS_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}": "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY" | jq -r .projectStatus.status)
            if [ "$ANALYSIS_STATUS" == "OK" ]; then
              echo "Quality Gate passed!"
              exit 0
            elif [ "$ANALYSIS_STATUS" == "ERROR" ]; then
              echo "Quality Gate failed!"
              exit 1
            fi
            echo "Esperando el Quality Gate... (${TIME_WAITED}s)"
            sleep $WAIT_INTERVAL
            TIME_WAITED=$((TIME_WAITED + WAIT_INTERVAL))
          done
          echo "Timeout esperando el Quality Gate"
          exit 1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: appgithubactions_fargate
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT    

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: appgithubaction_fargate_task.json 
          container-name: githubactionsapp
          image: ${{ steps.build-image.outputs.image }}    
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: githubactionsapp_service
          cluster: DevCluster
          wait-for-service-stability: true
